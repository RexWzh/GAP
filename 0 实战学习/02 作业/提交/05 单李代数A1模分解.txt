## 编写函数
gap> IrreducibleA1Module := function(s,n,i,F...)
>     ## 求单李代数的A1模分解 ##
>     local L,R,roots,alpha,beta,weight,max_weights,module,modules;
>     if Size(F)>1 then Error("Input error!");fi;#初始化基域
>     if Size(F)=0 then F:=Rationals;else F:=F[1];fi;
>     L := SimpleLieAlgebra(s,n,F);; #单李代数
>     R := RootSystem(L);; #根系
>     roots := List(PositiveRoots(R));; #正根系
>     Append(roots,NegativeRoots(R));; #添加负根系
>     alpha := roots[i];; #取A1的正根系alpha_i
>     max_weights := [];; #初始化极大权
>     for beta in roots do
>         if (not alpha+beta in roots) and (alpha<>-beta) then
>             Add(max_weights,beta);
>         fi;
>     od;
>     modules := [];; #不可约模的集合
>     for weight in max_weights do
>         module := [weight];
>         while (weight-alpha in roots) or (weight=alpha) do #遍历alpha链
>             weight := weight-alpha;
>             Add(module,weight);
>         od;
>         Add(modules,module);
>     od;
>     return modules;
> end;;
gap> lie := [["A",[1..8]],["D",[4..8]],["E",[6..8]],
> ["B",[2..8]],["C",[3..8]],["F",[4]],["G",[2]]];;

## 计算数据
gap> #A-G族的alpha_1轨道
gap> for x in lie do
>     s:=x[1];
>     for i in x[2] do
>         modules := IrreducibleA1Module(s,i,1); #不可约模分解
>         dim := List(modules,module->Size(module)); #分解的维数信息
>         d := Maximum(dim); #最大维数
>         dim := List([1..d],i->[i-1,Number(dim,j->(j=i))]); #合并相同维数
>         dim[1][2] := dim[1][2]+i-1; #加上H的部分
>         Print(s,i,": ",dim,"\n");
>     od;
> od;

gap> #B,C,F,G族另一个轨道
gap> for x in List([4..7],i->lie[i]) do
>     s:=x[1];
>     for i in x[2] do
>         modules := IrreducibleA1Module(s,i,i); #不可约模分解
>         dim := List(modules,module->Size(module)); #分解的维数信息
>         d := Maximum(dim); #最大维数
>         dim := List([1..d],i->[i-1,Number(dim,j->(j=i))]); #合并相同维数
>         dim[1][2] := dim[1][2]+i-1; #加上H的部分
>         Print(s,i,": ",dim,"\n");
>     od;
> od;

## 输出结果
#A-G族的alpha_1轨道
A1: [ [ 0, 0 ], [ 1, 0 ], [ 2, 1 ] ]
A2: [ [ 0, 1 ], [ 1, 2 ], [ 2, 1 ] ]
A3: [ [ 0, 4 ], [ 1, 4 ], [ 2, 1 ] ]
A4: [ [ 0, 9 ], [ 1, 6 ], [ 2, 1 ] ]
A5: [ [ 0, 16 ], [ 1, 8 ], [ 2, 1 ] ]
A6: [ [ 0, 25 ], [ 1, 10 ], [ 2, 1 ] ]
A7: [ [ 0, 36 ], [ 1, 12 ], [ 2, 1 ] ]
A8: [ [ 0, 49 ], [ 1, 14 ], [ 2, 1 ] ]
D4: [ [ 0, 9 ], [ 1, 8 ], [ 2, 1 ] ]
D5: [ [ 0, 18 ], [ 1, 12 ], [ 2, 1 ] ]
D6: [ [ 0, 31 ], [ 1, 16 ], [ 2, 1 ] ]
D7: [ [ 0, 48 ], [ 1, 20 ], [ 2, 1 ] ]
D8: [ [ 0, 69 ], [ 1, 24 ], [ 2, 1 ] ]
E6: [ [ 0, 35 ], [ 1, 20 ], [ 2, 1 ] ]
E7: [ [ 0, 66 ], [ 1, 32 ], [ 2, 1 ] ]
E8: [ [ 0, 133 ], [ 1, 56 ], [ 2, 1 ] ]
B2: [ [ 0, 3 ], [ 1, 2 ], [ 2, 1 ] ]
B3: [ [ 0, 6 ], [ 1, 6 ], [ 2, 1 ] ]
B4: [ [ 0, 13 ], [ 1, 10 ], [ 2, 1 ] ]
B5: [ [ 0, 24 ], [ 1, 14 ], [ 2, 1 ] ]
B6: [ [ 0, 39 ], [ 1, 18 ], [ 2, 1 ] ]
B7: [ [ 0, 58 ], [ 1, 22 ], [ 2, 1 ] ]
B8: [ [ 0, 81 ], [ 1, 26 ], [ 2, 1 ] ]
C3: [ [ 0, 4 ], [ 1, 4 ], [ 2, 3 ] ]
C4: [ [ 0, 11 ], [ 1, 8 ], [ 2, 3 ] ]
C5: [ [ 0, 22 ], [ 1, 12 ], [ 2, 3 ] ]
C6: [ [ 0, 37 ], [ 1, 16 ], [ 2, 3 ] ]
C7: [ [ 0, 56 ], [ 1, 20 ], [ 2, 3 ] ]
C8: [ [ 0, 79 ], [ 1, 24 ], [ 2, 3 ] ]
F4: [ [ 0, 15 ], [ 1, 8 ], [ 2, 7 ] ]
G2: [ [ 0, 3 ], [ 1, 0 ], [ 2, 1 ], [ 3, 2 ] ]

#B,C,F,G族另一个轨道
B2: [ [ 0, 1 ], [ 1, 0 ], [ 2, 3 ] ]
B3: [ [ 0, 6 ], [ 1, 0 ], [ 2, 5 ] ]
B4: [ [ 0, 15 ], [ 1, 0 ], [ 2, 7 ] ]
B5: [ [ 0, 28 ], [ 1, 0 ], [ 2, 9 ] ]
B6: [ [ 0, 45 ], [ 1, 0 ], [ 2, 11 ] ]
B7: [ [ 0, 66 ], [ 1, 0 ], [ 2, 13 ] ]
B8: [ [ 0, 91 ], [ 1, 0 ], [ 2, 15 ] ]
C3: [ [ 0, 10 ], [ 1, 4 ], [ 2, 1 ] ]
C4: [ [ 0, 21 ], [ 1, 6 ], [ 2, 1 ] ]
C5: [ [ 0, 36 ], [ 1, 8 ], [ 2, 1 ] ]
C6: [ [ 0, 55 ], [ 1, 10 ], [ 2, 1 ] ]
C7: [ [ 0, 78 ], [ 1, 12 ], [ 2, 1 ] ]
C8: [ [ 0, 105 ], [ 1, 14 ], [ 2, 1 ] ]
F4: [ [ 0, 21 ], [ 1, 14 ], [ 2, 1 ] ]
G2: [ [ 0, 3 ], [ 1, 4 ], [ 2, 1 ] ]
